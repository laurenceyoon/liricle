/*!
 * liricle v4.0.0
 * javascript lyric synchronizer library
 * https://github.com/mcanam/liricle
 * MIT license by mcanam
 */
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(t="undefined"!=typeof globalThis?globalThis:t||self).Liricle=n()}(this,(function(){"use strict";const t=/\[(ar|ti|al|au|by|length|offset|re|ve):(.*)\]/i,n=/<\d{2}:\d{2}(.\d{2,})?>\s*[^\s|<]*/g,e=/\[\d{2}:\d{2}(.\d{2,})?\]/g,i=/<\d{2}:\d{2}(.\d{2,})?>/g;function r(n){const i=n.split(/\r?\n/),r={tags:{},lines:[],enhanced:a(n)};return i.forEach((n=>{const i=function(n){const e=n.match(t);if(!e)return;return{name:e[1],value:e[2].trim()}}(n),a=function(t){const n=t.match(e),i=[];if(!n)return;return n.forEach((n=>{i.push({time:s(n),text:o(t),words:l(t)})})),i}(n);i&&(r.tags[i.name]=i.value),a&&r.lines.push(...a)})),r.lines=function(t){return t.sort(((t,n)=>t.time-n.time))}(r.lines),r}function s(t){let n=t.replace(/\[|\]|<|>/g,"");return n=function(t){let[n,e]=t.split(":");return n=60*parseFloat(n),e=parseFloat(e),n+e}(n),n}function o(t){let n=t.replace(e,"");return n=n.replace(i,""),n=n.replace(/\s{2,}/g," "),n.trim()}function l(t){const e=t.match(n),r=[];return e?(e.forEach((t=>{const n=t.match(i)[0];r.push({time:s(n),text:o(t)})})),r):null}function a(t){return i.test(t)}function u(t,n){let e=null,i=null;if(e=function(t,n){const e=c(t,n);return null!=e?{index:e,...t[e]}:null}(t.lines,n),null!=e&&t.enhanced){i=function(t,n){if(null==t)return t;const e=c(t,n);return null!=e?{index:e,...t[e]}:null}(e.words,n),delete e.words}return{line:e,word:i}}function c(t,n){const e=[];if(t.forEach((t=>{const i=n-t.time;i>=0&&e.push(i)})),0==e.length)return null;const i=Math.min(...e);return e.indexOf(i)}return class{#t=null;#n=null;#e=0;#i={};#r=()=>{};#s=()=>{};get data(){return this.#i}get offset(){return this.#e}set offset(t){t=parseFloat(t)/1e3,this.#e=t||0}load(t={}){t.text&&(this.#i=r(t.text),this.#r(this.#i)),t.url&&fetch(t.url).then((t=>t.text())).then((t=>{this.#i=r(t),this.#r(this.#i)})).catch((t=>{throw Error("failed to load lyric file. "+t.message)}))}sync(t,n=!1){const{line:e,word:i}=u(this.data,t+this.offset),{enhanced:r}=this.data;if(null==e&&null==i)return;if(n)return this.#s(e,i);const s=e.index==this.#t,o=null!=i&&i.index==this.#n;if(r&&null!=i){if(s&&o)return}else if(s)return;this.#s(e,i),this.#t=e.index,this.#n=null!=i?i.index:null}on(t,n){switch(t){case"load":this.#r=n;break;case"sync":this.#s=n}}}}));
//# sourceMappingURL=liricle.min.js.map
